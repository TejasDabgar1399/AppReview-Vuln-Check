[source::...ta_dmarc*.log*]
SHOULD_LINEMERGE = true
sourcetype = ta:dmarc:log

[dmarc]
BREAK_ONLY_BEFORE                  = ^(RUA BEGIN|\{)
TIME_PREFIX                        = ("end":\s*"|rpt_metadata_date_range_end=)
SHOULD_LINEMERGE                   = true
MAX_TIMESTAMP_LOOKAHEAD            = 20
TZ                                 = UTC
TRANSFORMS-json                    = switch_sourcetype_if_json
TRANSFORMS-kv                      = switch_sourcetype_if_kv

[dmarc:kv]
BREAK_ONLY_BEFORE                  = ^RUA BEGIN
SHOULD_LINEMERGE                   = true
TIME_PREFIX                        = rpt_metadata_date_range_end=
MAX_TIMESTAMP_LOOKAHEAD            = 20
TZ                                 = UTC
FIELDALIAS-source_ip               = row_source_ip AS src_ip
FIELDALIAS-dest                    = rpt_metadata_org_name AS dest
FIELDALIAS-signature_id            = rpt_metadata_report_id AS signature_id
FIELDALIAS-user                    = identifiers_header_from AS user
FIELDALIAS-src_user                = identifiers_header_from AS src_user
EVAL-signature                     = "Use of mail-from domain " + user + " at " + dest
EVAL-src                           = if(isnull(src),src_ip,src)
EVAL-app                           = "dmarc"
EVAL-action                        = case(row_policy_evaluated_disposition=="none", "success", 1==1, "failure")
#EVAL-would_be_action              = case((row_policy_evaluated_dkim=="none" OR row_policy_evaluated_dkim=="neutral" OR row_policy_evaluated_dkim=="pass") AND (row_policy_evaluated_spf=="none" OR row_policy_evaluated_spf=="neutral" OR row_policy_evaluated_spf=="pass"), "success", 1==1, "failure") 

[dmarc:json]
SHOULD_LINEMERGE                   = false
KV_MODE                            = json
MAX_TIMESTAMP_LOOKAHEAD            = 20
TIME_PREFIX                        = "end":\s*"
TZ                                 = UTC
# DKIMAuthResultType is unbounded in the RUA XSD, so a JSON array may occur
FIELDALIAS-jsoncurlyfix1           = feedback{}.record.auth_results.dkim{}.domain AS feedback{}.record.auth_results.dkim.domain
FIELDALIAS-jsoncurlyfix2           = feedback{}.record.auth_results.dkim{}.result AS feedback{}.record.auth_results.dkim.result
# SPFAuthResultType is unbounded in the RUA XSD so a JSON array may occur
FIELDALIAS-jsoncurlyfix3           = feedback{}.record.auth_results.spf{}.domain AS feedback{}.record.auth_results.spf.domain
FIELDALIAS-jsoncurlyfix4           = feedback{}.record.auth_results.spf{}.result AS feedback{}.record.auth_results.spf.result
FIELDALIAS-src_ip                  = feedback{}.record.row.source_ip AS src_ip
FIELDALIAS-src                     = feedback{}.record.row.ip_resolution AS src
FIELDALIAS-dest                    = feedback{}.report_metadata.org_name AS dest
FIELDALIAS-signature_id            = feedback{}.report_metadata.report_id AS signature_id
FIELDALIAS-dest_user               = feedback{}.record.identifiers.envelope_to AS dest_user
FIELDALIAS-user                    = feedback{}.record.identifiers.header_from AS user
FIELDALIAS-src_user                = feedback{}.record.identifiers.header_from AS src_user
EVAL-signature                     = "Use of mail-from domain " + user + " at " + dest
EVAL-src                           = if(isnull(src),src_ip,src)
EVAL-app                           = "dmarc"
EVAL-action                        = case('feedback{}.record.row.policy_evaluated.disposition'=="none", "success", 1==1, "failure")

